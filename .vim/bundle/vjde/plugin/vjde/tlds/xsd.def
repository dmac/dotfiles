private enum QName {
      string,
      normalizedString,
      token,
      byte,
      unsignedByte,
      base64Binary,
      hexBinary,
      integer,
      positiveInteger,
      negativeInteger,
      nonNegativeInteger,
      nonPositiveInteger,
      int,
      unsignedInt,
      long,
      unsignedLong,
      short,
      unsignedShort,
      decimal,
      float,
      double,
      boolean,
      time,
      dateTime,
      duration,
      date,
      gMonth,
      gYear,
      gYearMonth,
      gDay,
      gMonthDay,
      Name,
      QName,
      NCName,
      anyURI,
      language,
      ID,
      IDREF,
      IDREFS,
      ENTITY,
      ENTITIES,
      NOTATION,
      NMTOKEN,
      MNTOKENS,
      xsd:string,
      xsd:normalizedString,
      xsd:token,
      xsd:byte,
      xsd:unsignedByte,
      xsd:base64Binary,
      xsd:hexBinary,
      xsd:integer,
      xsd:positiveInteger,
      xsd:negativeInteger,
      xsd:nonNegativeInteger,
      xsd:nonPositiveInteger,
      xsd:int,
      xsd:unsignedInt,
      xsd:long,
      xsd:unsignedLong,
      xsd:short,
      xsd:unsignedShort,
      xsd:decimal,
      xsd:float,
      xsd:double,
      xsd:boolean,
      xsd:time,
      xsd:dateTime,
      xsd:duration,
      xsd:date,
      xsd:gMonth,
      xsd:gYear,
      xsd:gYearMonth,
      xsd:gDay,
      xsd:gMonthDay,
      xsd:Name,
      xsd:QName,
      xsd:NCName,
      xsd:anyURI,
      xsd:language,
      xsd:ID,
      xsd:IDREF,
      xsd:IDREFS,
      xsd:ENTITY,
      xsd:ENTITIES,
      xsd:NOTATION,
      xsd:NMTOKEN,
      xsd:MNTOKENS
}



private tag withAbstractBlock {
   attr abstract { false, true }
   attr block;
}

private tag withFinal {
   attr final;
}

private tag withBase {
   attr QName base;
}

private tag withDefaultOrFixed {
   attr default;
   attr fixed;
}

private tag withFixedValue {
   attr fixed { false, true }
   attr nonNegativeInteger value;
}

private tag withMixed {
   attr mixed { false, true }
}
private tag withID {
   attr NCName id;
}

private tag withName {
   attr name;
}

private tag withRef {
   attr ref;
}

private tag withXPath {
   attr xpath;
}
private tag withMinMaxOccurs {
   attr nonNegativeInteger minOccurs { 0, 1}
   attr nonNegativeInteger maxOccurs { 0, 1, unbounded }
}

private tag withNamespace {
   attr namespace;
}

private tag withSchemaLocation {
   attr anyURI schemaLocation;
}

private tag withProcessContents {
   attr processContents {
      lax,
      skip,
      strict
   };
}

private tag withSource {
   attr anyURI source;
}

private tag withXMLLang {
   attr xml:lang;
}


tag xsd:all ( annotation?, element* ) < withID, withMinMaxOccurs {
}

tag xsd:annotation ( appinfo | documentation ) < withID {
}

tag xsd:any ( annotation? ) < withID, withMinMaxOccurs, withNamespace, withProcessContents {
}

tag xsd:anyAttribute ( annotation? ) < withNamespace, withProcessContents {
}

tag xsd:appInfo < withSource {
}

tag xsd:attribute (annotation?, SimpleType?) < withID, withDefaultOrFixed, withName, withRef {
   attr form { qualified, unqualified }
   attr type;
   attr use { optional, prohibited, required }
}

tag xsd:attributeGroup ( annotation?, ((attribute | attributeGroup)*, anyAttribute?) ) < withID, withName, withRef {
}

tag xsd:choice ( annotation?, (element | group | choice | sequence | any)* ) < withID, withMinMaxOccurs  {
}

tag xsd:complexContent ( annotation?, (restriction | extension) ) < withID, withMixed {
}

tag xsd:complexType ( annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?))) ) < withAbstractBlock, withFinal, withID, withName, withMixed {
}

tag xsd:documentation < withSource, withXMLLang {
}

tag xsd:element (annotation?, ((simpleType | complexType)?, (unique | key | keyref)*) ) < withAbstractBlockFInal, withDefaultOrFixed, withID, withName, withMinMaxOccurs, withRef,  {
   attr form { qualified, unqualified }
   attr type;
   attr nillable { false, true }
   attr QName substitutionGroup;
}

tag xsd:enumeration ( annotation? ) < withID {
   attr value;
}

tag xsd:extension ( annotation?, (group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?) ) < withID, withBase {
}

tag xsd:field ( annotation? ) < withID, withXPath {
}

tag xsd:fractionDigits ( annotation? ) < withID, withFixedValue {
}

tag xsd:group ( annotation?, (all | choice | sequence) ) < withName {
}

tag xsd:import ( annotation? ) < withID, withNamespace, withSchemaLocation {
}

tag xsd:include ( annotation? ) withID, withSchemaLocation {
}

tag xsd:key ( annotation?, (selector, field+) ) < withID, withName {
}

tag xsd:keyref ( annotation?, (selector, field+) ) < withID, withName {
   attr QName refer;
}

tag xsd:length ( annotation? ) < withID, withFixedValue {
}

tag xsd:list ( annotation?, simpleType? ) < withID {
   attr QName itemType {
      string,
      normalizedString,
      token,
      byte,
      unsignedByte,
      base64Binary,
      hexBinary,
      integer,
      positiveInteger,
      negativeInteger,
      nonNegativeInteger,
      nonPositiveInteger,
      int,
      unsignedInt,
      long,
      unsignedLong,
      short,
      unsignedShort,
      decimal,
      float,
      double,
      boolean,
      time,
      dateTime,
      duration,
      date,
      gMonth,
      gYear,
      gYearMonth,
      gDay,
      gMonthDay,
      Name,
      QName,
      NCName,
      anyURI,
      language,
      ID,
      IDREF,
      IDREFS,
      ENTITY,
      ENTITIES,
      NOTATION,
      NMTOKEN,
      MNTOKENS,
      xsd:string,
      xsd:normalizedString,
      xsd:token,
      xsd:byte,
      xsd:unsignedByte,
      xsd:base64Binary,
      xsd:hexBinary,
      xsd:integer,
      xsd:positiveInteger,
      xsd:negativeInteger,
      xsd:nonNegativeInteger,
      xsd:nonPositiveInteger,
      xsd:int,
      xsd:unsignedInt,
      xsd:long,
      xsd:unsignedLong,
      xsd:short,
      xsd:unsignedShort,
      xsd:decimal,
      xsd:float,
      xsd:double,
      xsd:boolean,
      xsd:time,
      xsd:dateTime,
      xsd:duration,
      xsd:date,
      xsd:gMonth,
      xsd:gYear,
      xsd:gYearMonth,
      xsd:gDay,
      xsd:gMonthDay,
      xsd:Name,
      xsd:QName,
      xsd:NCName,
      xsd:anyURI,
      xsd:language,
      xsd:ID,
      xsd:IDREF,
      xsd:IDREFS,
      xsd:ENTITY,
      xsd:ENTITIES,
      xsd:NOTATION,
      xsd:NMTOKEN,
      xsd:MNTOKENS
   }
}

tag xsd:maxExclusive ( annotation? ) < withID, withFixedValue {
}

tag xsd:maxInclusive ( annotation? ) < withID, withFixedValue {
}

tag xsd:maxLength ( annotation? ) < withID, withFixedValue {
}

tag xsd:minExclusive ( annotation? ) < withID, withFixedValue {
}

tag xsd:minInclusive ( annotation? ) < withID, withFixedValue {
}

tag xsd:minLength ( annotation? ) < withID, withFixedValue {
}

tag xsd:notation ( annotation? ) < withID, withName {
   attr anyURI public;
   attr anyURI system;
}

tag xsd:pattern ( annotation? ) < withID {
   attr string value;
}

tag xsd:redefine ( (annotation | (simpleType | complexType | group | attributeGroup))* ) < withID, withSchemaLocation {
}

tag xsd:restriction ( annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)* ) ) < withID, withBase {
}

tag xsd:schema ((include | import | redefine | annotation)*, (((simpleType | complexType | group | attributeGroup) | element | attribute | notation), annotation*)*) < withID, withXMLLang {
   attr attributeFormDefault { qualified, unqualified }
   attr blockDefault;
   attr elementFormDefault { qualified, unqualified }
   attr finalDefault;
   attr anyURI targetNamespace;
   attr version;
}

tag xsd:selector ( annotation? ) < withID, withXPath {
}

tag xsd:sequence ( annotation?, (element | group | choice | sequence | any)* ) < withID, withMinMaxOccurs {
}

tag xsd:simpleContent ( annotation?, (restriction | extension) ) < withID {
}

tag xsd:simpleType ( annotation?, (restriction | list | union) ) < withID, withName, withFinal {
}

tag xsd:totalDigits ( annotation? ) < withID, withFixedValue {
}

tag xsd:union ( annotation?, simpleType* ) < withID {
   attr memberTypes;
}

tag xsd:unique (annotation?, (selector, field+)) < withID, withName {
}

tag xsd:whiteSpace ( annotation? ) < withID {
   attr fixed { false, true }
   attr value {
      preserve,
      replace,
      collapse
   }
}


//property xsd:string;
//property xsd:normalizedString;
//property xsd:token;
//property xsd:byte;
//property xsd:unsignedByte;
//property xsd:base64Binary;
//property xsd:hexBinary;
//property xsd:integer;
//property xsd:positiveInteger;
//property xsd:negativeInteger;
//property xsd:nonNegativeInteger;
//property xsd:nonPositiveInteger;
//property xsd:int;
//property xsd:unsignedInt;
//property xsd:long;
//property xsd:unsignedLong;
//property xsd:short;
//property xsd:unsignedShort;
//property xsd:decimal;
//property xsd:float;
//property xsd:double;
//property xsd:boolean;
//property xsd:time;
//property xsd:dateTime;
//property xsd:duration;
//property xsd:date;
//property xsd:gMonth;
//property xsd:gYear;
//property xsd:gYearMonth;
//property xsd:gDay;
//property xsd:gMonthDay;
//property xsd:Name;
//property xsd:QName;
//property xsd:NCName;
//property xsd:anyURI;
//property xsd:language;
//property xsd:ID;
//property xsd:IDREF;
//property xsd:IDREFS;
//property xsd:ENTITY;
//property xsd:ENTITIES;
//property xsd:NOTATION;
//property xsd:NMTOKEN;
//property xsd:MNTOKENS;


